"""
üéØ PR√âSENTATION COMPL√àTE - GESTION D'ERREURS EN PYTHON
Niveau : D√©butant √† Interm√©diaire
"""

# =============================================================================
# INTRODUCTION - POURQUOI LA GESTION D'ERREURS ?
# =============================================================================

print("=" * 70)
print("üéØ GESTION D'ERREURS EN PYTHON")
print("=" * 70)

print(
    """
üìä POURQUOI EST-CE IMPORTANT ?

1. üí• Les erreurs arrivent TOUJOURS en programmation
2. üõ°Ô∏è  √âviter les plantages inattendus
3. üéØ Donner des messages d'erreur clairs aux utilisateurs
4. üîÑ Permettre la reprise apr√®s une erreur
5. üìù Faciliter le d√©bogage
"""
)

# =============================================================================
# SECTION 1 : LES DIFF√âRENTS TYPES D'ERREURS
# =============================================================================

print("\n" + "=" * 70)
print("SECTION 1 : TYPES D'ERREURS")
print("=" * 70)


def demonstration_erreurs():
    """
    Demonstration des diff√©rents types d'erreurs courantes
    """
    print("\nüîç EXAMEN DES ERREURS COURANTES")
    print("-" * 40)

    # 1. SyntaxError - Erreur de syntaxe
    print("1. ‚ùå SyntaxError - Erreur dans la structure du code")
    # Exemple: if x = 5:  # Au lieu de if x == 5:
    print("   Exemple: if x = 5: ‚Üí Mauvaise affectation dans une condition")

    # 2. NameError - Variable non d√©finie
    print("\n2. ‚ùå NameError - Variable non d√©finie")
    try:
        print(variable_inexistante)
    except NameError as e:
        print(f"   Exemple: {e}")

    # 3. TypeError - Mauvais type de donn√©es
    print("\n3. ‚ùå TypeError - Op√©ration sur des types incompatibles")
    try:
        resultat = "hello" + 5
    except TypeError as e:
        print(f"   Exemple: {e}")

    # 4. ValueError - Valeur inappropri√©e
    print("\n4. ‚ùå ValueError - Valeur incorrecte pour l'op√©ration")
    try:
        nombre = int("abc")
    except ValueError as e:
        print(f"   Exemple: {e}")

    # 5. IndexError - Index hors limites
    print("\n5. ‚ùå IndexError - Acc√®s √† un index inexistant")
    try:
        liste = [1, 2, 3]
        element = liste[10]
    except IndexError as e:
        print(f"   Exemple: {e}")

    # 6. KeyError - Cl√© de dictionnaire inexistante
    print("\n6. ‚ùå KeyError - Cl√© de dictionnaire introuvable")
    try:
        dico = {"a": 1, "b": 2}
        valeur = dico["c"]
    except KeyError as e:
        print(f"   Exemple: {e}")

    # 7. AttributeError - Attribut/m√©thode inexistant
    print("\n7. ‚ùå AttributeError - Attribut ou m√©thode inexistant")
    try:
        nombre = 10
        nombre.methode_inexistante()
    except AttributeError as e:
        print(f"   Exemple: {e}")

    # 8. ZeroDivisionError - Division par z√©ro
    print("\n8. ‚ùå ZeroDivisionError - Division par z√©ro")
    try:
        resultat = 10 / 0
    except ZeroDivisionError as e:
        print(f"   Exemple: {e}")


# demonstration_erreurs()

# =============================================================================
# SECTION 2 : LA STRUCTURE TRY/EXCEPT DE BASE
# =============================================================================

print("\n" + "=" * 70)
print("SECTION 2 : STRUCTURE TRY/EXCEPT")
print("=" * 70)


def structure_de_base():
    """
    Structure fondamentale de la gestion d'erreurs
    """
    print(
        """
üß± STRUCTURE FONDAMENTALE :

    try:
        # Code qui peut g√©n√©rer une erreur
        operation_risquee()
    except ExceptionType:
        # Code ex√©cut√© si l'erreur se produit
        gerer_erreur()
    """
    )

    print("\nüìù EXEMPLE PRATIQUE :")
    print("-" * 30)

    # Exemple 1: Gestion simple
    def convertir_en_entier(texte):
        try:
            nombre = int(texte)
            return f"‚úÖ Conversion r√©ussie: {nombre}"
        except ValueError:
            return "‚ùå Erreur: Ce n'est pas un nombre valide !"

    # Test
    tests = ["123", "45.67", "abc", "1000"]
    for test in tests:
        print(f"'{test}' ‚Üí {convertir_en_entier(test)}")

    print("\nüéØ AVANTAGES :")
    print("‚Ä¢ ‚úÖ Emp√™che le plantage du programme")
    print("‚Ä¢ ‚úÖ Donne un feedback utile √† l'utilisateur")
    print("‚Ä¢ ‚úÖ Permet de continuer l'ex√©cution")


# structure_de_base()

# =============================================================================
# SECTION 3 : GESTION MULTIPLE DES ERREURS
# =============================================================================

print("\n" + "=" * 70)
print("SECTION 3 : GESTION MULTIPLE DES ERREURS")
print("=" * 70)


def gestion_multiple():
    """
    Gestion de diff√©rents types d'erreurs
    """
    print(
        """
üéØ GESTIONNER DIFF√âRENTS TYPES D'ERREURS :

    try:
        operation_complexe()
    except TypeError:
        gerer_erreur_type()
    except ValueError:
        gerer_erreur_valeur()
    except ZeroDivisionError:
        gerer_division_zero()
    """
    )

    print("\nüîß EXEMPLE COMPLET :")
    print("-" * 30)

    def calculer_expression(expression):
        """
        Calcule une expression math√©matique avec gestion d'erreurs compl√®te
        """
        try:
            resultat = eval(expression)
            return f"‚úÖ R√©sultat: {resultat}"

        except SyntaxError:
            return "‚ùå Erreur de syntaxe dans l'expression"

        except TypeError:
            return "‚ùå Types de donn√©es incompatibles"

        except ZeroDivisionError:
            return "‚ùå Division par z√©ro impossible"

        except NameError:
            return "‚ùå Variable non d√©finie dans l'expression"

        except Exception as e:
            return f"‚ùå Erreur inattendue: {type(e).__name__} - {e}"

    # Tests
    expressions = [
        "10 + 5",
        "10 / 0",
        "10 + 'abc'",
        "variable_inexistante * 2",
        "10 * (5 + 3",
        "2 ** 1000",
    ]

    for expr in expressions:
        print(f"'{expr}' ‚Üí {calculer_expression(expr)}")

    print("\nüí° ASTUCE : Capturer plusieurs exceptions en une ligne")
    try:
        print("Simulation de fonction")
    except (ValueError, TypeError) as e:
        print(f"Erreur de valeur ou type: {e}")


# gestion_multiple()

# =============================================================================
# SECTION 4 : ELSE ET FINALLY
# =============================================================================

print("\n" + "=" * 70)
print("SECTION 4 : ELSE ET FINALLY")
print("=" * 70)


def else_et_finally():
    """
    Utilisation de else et finally dans la gestion d'erreurs
    """
    print(
        """
üîÑ STRUCTURE COMPL√àTE :

try:
    # Code √† risque
    operation_risquee()
except:
    # Si erreur
    gerer_erreur()
else:
    # Si PAS d'erreur
    operation_si_reussite()
finally:
    # TOUJOURS ex√©cut√©
    nettoyage_obligatoire()
    """
    )

    print("\nüèóÔ∏è  EXEMPLE PRATIQUE :")
    print("-" * 30)

    def traiter_fichier(nom_fichier):
        """
        Simule le traitement d'un fichier avec gestion compl√®te
        """
        print(f"\nüìÅ Traitement du fichier: {nom_fichier}")

        try:
            # Simulation d'ouverture de fichier
            if nom_fichier == "fichier_corrompu.txt":
                raise IOError("Fichier corrompu")
            elif nom_fichier == "fichier_inexistant.txt":
                raise FileNotFoundError("Fichier non trouv√©")

            print("   ‚úÖ Fichier ouvert avec succ√®s")
            contenu = "Contenu du fichier"

        except FileNotFoundError:
            print("   ‚ùå Erreur: Fichier non trouv√©")
            return None

        except IOError as e:
            print(f"   ‚ùå Erreur d'E/S: {e}")
            return None

        except Exception as e:
            print(f"   ‚ùå Erreur inattendue: {e}")
            return None

        else:
            # Ex√©cut√© seulement si aucune exception n'est lev√©e
            print("   ‚úÖ Traitement du contenu r√©ussi")
            return contenu.upper()

        finally:
            # TOUJOURS ex√©cut√©, erreur ou non
            print("   üîß Fermeture des ressources (toujours ex√©cut√©)")

    # Tests
    fichiers = ["fichier_normal.txt", "fichier_inexistant.txt", "fichier_corrompu.txt"]

    for fichier in fichiers:
        resultat = traiter_fichier(fichier)
        if resultat:
            print(f"   üìÑ R√©sultat: {resultat}")


# else_et_finally()

# =============================================================================
# SECTION 5 : LEVER DES EXCEPTIONS (RAISE)
# =============================================================================

print("\n" + "=" * 70)
print("SECTION 5 : LEVER DES EXCEPTIONS")
print("=" * 70)


def lever_exceptions():
    """
    Comment et pourquoi lever des exceptions
    """
    print(
        """
üö® POURQUOI LEVER DES EXCEPTIONS ?

1. üéØ Valider des donn√©es d'entr√©e
2. üõ°Ô∏è  Emp√™cher des √©tats invalides
3. üì¢ Signaler des probl√®mes m√©tier
4. üîÑ Forcer la gestion d'erreurs
    """
    )

    print("\nüéØ EXEMPLE : VALIDATION D'√ÇGE")
    print("-" * 30)

    def verifier_age(age):
        """
        Valide un √¢ge avec des exceptions personnalis√©es
        """
        if not isinstance(age, (int, float)):
            raise TypeError("L'√¢ge doit √™tre un nombre")

        if age < 0:
            raise ValueError("L'√¢ge ne peut pas √™tre n√©gatif")

        if age > 150:
            raise ValueError("√Çge invraisemblable (max 150 ans)")

        if age < 18:
            raise PermissionError("Acc√®s r√©serv√© aux majeurs")

        return f"‚úÖ √Çge {age} valid√© !"

    # Tests
    ages_test = [25, -5, "vingt", 200, 15]

    for age in ages_test:
        try:
            resultat = verifier_age(age)
            print(f"√Çge {age}: {resultat}")
        except (TypeError, ValueError, PermissionError) as e:
            print(f"√Çge {age}: ‚ùå {e}")

    print("\nüîß EXEMPLE AVEC EXCEPTION PERSONNALIS√âE")
    print("-" * 40)

    class SoldeInsuffisantError(Exception):
        """Exception personnalis√©e pour un solde insuffisant"""

        def __init__(self, solde, montant):
            self.solde = solde
            self.montant = montant
            super().__init__(f"Solde insuffisant: {solde}‚Ç¨ pour retirer {montant}‚Ç¨")

    class CompteBancaire:
        def __init__(self, solde_initial=0):
            self.solde = solde_initial

        def retirer(self, montant):
            if montant <= 0:
                raise ValueError("Le montant doit √™tre positif")

            if montant > self.solde:
                raise SoldeInsuffisantError(self.solde, montant)

            self.solde -= montant
            return f"‚úÖ Retrait de {montant}‚Ç¨ effectu√©. Nouveau solde: {self.solde}‚Ç¨"

    # Test du compte bancaire
    compte = CompteBancaire(1000)

    operations = [500, 2000, -100, 300]

    for montant in operations:
        try:
            resultat = compte.retirer(montant)
            print(f"Retrait {montant}‚Ç¨: {resultat}")
        except (ValueError, SoldeInsuffisantError) as e:
            print(f"Retrait {montant}‚Ç¨: ‚ùå {e}")


# lever_exceptions()

# =============================================================================
# SECTION 6 : EXCEPTIONS PERSONNALIS√âES
# =============================================================================

print("\n" + "=" * 70)
print("SECTION 6 : EXCEPTIONS PERSONNALIS√âES")
print("=" * 70)


def exceptions_personnalisees():
    """
    Cr√©ation et utilisation d'exceptions personnalis√©es
    """
    print(
        """
üé® POURQUOI DES EXCEPTIONS PERSONNALIS√âES ?

1. üéØ Clarifier la s√©mantique des erreurs m√©tier
2. üè∑Ô∏è  Cat√©goriser les erreurs sp√©cifiques
3. üìä Ajouter des informations contextuelles
4. üîß Faciliter la gestion sp√©cifique
    """
    )

    print("\nüîß CR√âATION D'EXCEPTIONS M√âTIER")
    print("-" * 30)

    # Exceptions personnalis√©es pour un syst√®me d'authentification
    class ErreurAuthentification(Exception):
        """Classe de base pour les erreurs d'authentification"""

        pass

    class UtilisateurInexistantError(ErreurAuthentification):
        """L'utilisateur n'existe pas"""

        def __init__(self, nom_utilisateur):
            self.nom_utilisateur = nom_utilisateur
            super().__init__(f"L'utilisateur '{nom_utilisateur}' n'existe pas")

    class MotDePasseIncorrectError(ErreurAuthentification):
        """Le mot de passe est incorrect"""

        def __init__(self, nom_utilisateur):
            self.nom_utilisateur = nom_utilisateur
            super().__init__(f"Mot de passe incorrect pour '{nom_utilisateur}'")

    class CompteBloqueError(ErreurAuthentification):
        """Le compte est bloqu√©"""

        def __init__(self, nom_utilisateur, duree_blocage=30):
            self.nom_utilisateur = nom_utilisateur
            self.duree_blocage = duree_blocage
            super().__init__(
                f"Compte '{nom_utilisateur}' bloqu√© pour {duree_blocage} minutes"
            )

    print("\nüèóÔ∏è  SYST√àME D'AUTHENTIFICATION")
    print("-" * 30)

    class SystemeAuthentification:
        def __init__(self):
            self.utilisateurs = {
                "alice": {
                    "mot_de_passe": "secret123",
                    "tentatives": 0,
                    "bloque": False,
                },
                "bob": {"mot_de_passe": "password", "tentatives": 0, "bloque": False},
            }
            self.max_tentatives = 3

        def authentifier(self, nom_utilisateur, mot_de_passe):
            # V√©rifier si l'utilisateur existe
            if nom_utilisateur not in self.utilisateurs:
                raise UtilisateurInexistantError(nom_utilisateur)

            utilisateur = self.utilisateurs[nom_utilisateur]

            # V√©rifier si le compte est bloqu√©
            if utilisateur["bloque"]:
                raise CompteBloqueError(nom_utilisateur)

            # V√©rifier le mot de passe
            if utilisateur["mot_de_passe"] != mot_de_passe:
                utilisateur["tentatives"] += 1

                # Bloquer le compte si trop de tentatives
                if utilisateur["tentatives"] >= self.max_tentatives:
                    utilisateur["bloque"] = True
                    raise CompteBloqueError(nom_utilisateur)
                else:
                    raise MotDePasseIncorrectError(nom_utilisateur)

            # R√©initialiser les tentatives en cas de succ√®s
            utilisateur["tentatives"] = 0
            return f"‚úÖ Authentification r√©ussie pour '{nom_utilisateur}'"

    # Test du syst√®me
    auth = SystemeAuthentification()

    scenarios = [
        ("alice", "secret123"),  # ‚úÖ Succ√®s
        ("charlie", "mdp"),  # ‚ùå Utilisateur inexistant
        ("alice", "mauvais_mdp"),  # ‚ùå Mot de passe incorrect
        ("bob", "mauvais"),  # ‚ùå Tentatives multiples
        ("bob", "encore_mauvais"),  # ‚ùå Compte bloqu√©
        ("bob", "password"),  # ‚ùå Compte toujours bloqu√©
    ]

    for nom, mdp in scenarios:
        try:
            resultat = auth.authentifier(nom, mdp)
            print(f"{nom}/{mdp}: {resultat}")
        except ErreurAuthentification as e:
            print(f"{nom}/{mdp}: ‚ùå {e}")


# exceptions_personnalisees()

# =============================================================================
# SECTION 7 : BONNES PRATIQUES
# =============================================================================

print("\n" + "=" * 70)
print("SECTION 7 : BONNES PRATIQUES")
print("=" * 70)


def bonnes_pratiques():
    """
    Les bonnes pratiques de la gestion d'erreurs
    """
    print(
        """
üìö LES 10 COMMANDEMENTS DE LA GESTION D'ERREURS :

1. üéØ Soyez SP√âCIFIQUE dans les except
2. ‚ùå N'utilisez PAS except: tout seul
3. üìù Logguez les erreurs pour le d√©bogage
4. üé™ Ne masquez PAS les erreurs silencieusement
5. üîß Utilisez finally pour le nettoyage
6. üè∑Ô∏è  Cr√©ez des exceptions personnalis√©es pour le m√©tier
7. üìä Fournissez des messages d'erreur UTILES
8. üîÑ Pensez √† la REPRISE apr√®s erreur
9. üé® Utilisez l'encapsulation pour la gestion d'erreurs
10. üß™ TESTEZ vos gestionnaires d'erreurs
    """
    )

    print("\n‚úÖ CE QU'IL FAUT FAIRE")
    print("-" * 25)

    print(
        """
# ‚úÖ BON - Gestion sp√©cifique
try:
    nombre = int(entree_utilisateur)
except ValueError:
    print("Veuillez entrer un nombre valide")

# ‚úÖ BON - Capture multiple
except (FileNotFoundError, PermissionError) as e:
    print(f"Probl√®me de fichier: {e}")

# ‚úÖ BON - Exception personnalis√©e
class ErreurMetier(Exception):
    pass
    """
    )

    print("\n‚ùå CE QU'IL NE FAUT PAS FAIRE")
    print("-" * 30)

    print(
        """
# ‚ùå MAUVAIS - Trop g√©n√©ral
try:
    operation()
except:  # Capture TOUTES les erreurs
    pass  # Et les ignore !

# ‚ùå MAUVAIS - Message inutile
except Exception as e:
    print("Une erreur est survenue")  # Quel erreur ??

# ‚ùå MAUVAIS - Gestion silencieuse
except ValueError:
    pass  # L'utilisateur ne sait pas ce qui ne va pas
    """
    )

    print("\nüîß EXEMPLE DE BONNE GESTION")
    print("-" * 30)

    def bon_exemple():
        """Exemple de bonne gestion d'erreurs"""
        import logging

        # Configuration du logging
        logging.basicConfig(level=logging.INFO)

        def charger_configuration(fichier_config):
            try:
                # Simulation de chargement
                if not fichier_config.endswith(".json"):
                    raise ValueError(
                        "Le fichier de configuration doit √™tre au format JSON"
                    )

                if fichier_config == "config_corrompue.json":
                    raise IOError("Fichier corrompu")

                config = {"theme": "sombre", "langue": "fr"}
                logging.info(f"‚úÖ Configuration charg√©e depuis {fichier_config}")
                return config

            except ValueError as e:
                logging.error(f"‚ùå Erreur de validation: {e}")
                # Retourne une configuration par d√©faut
                return {"theme": "clair", "langue": "fr"}

            except IOError as e:
                logging.error(f"‚ùå Erreur d'E/S: {e}")
                raise  # Relance l'exception pour que l'appelant sache

            except Exception as e:
                logging.error(f"‚ùå Erreur inattendue: {e}")
                raise
            finally:
                logging.info("üîß Nettoyage des ressources de configuration")

        # Test
        try:
            config = charger_configuration("config.json")
            print(f"Configuration: {config}")
        except Exception as e:
            print(f"√âchec du chargement: {e}")

    bon_exemple()


# bonnes_pratiques()

# =============================================================================
# SECTION 8 : EXEMPLE PRATIQUES
# =============================================================================

print("\n" + "=" * 70)
print("SECTION 8 : EXEMPLE PRATIQUES")
print("=" * 70)


def exemples_pratiques():
    """
    exemples pour pratiquer la gestion d'erreurs
    """
    print(
        """
üí™ EXEMPLE PRATIQUES :

1. üéØ Gestion d'erreurs de base
2. üîß Exceptions personnalis√©es  
3. üèóÔ∏è  Syst√®me complet avec gestion d'erreurs
    """
    )

    print("\nüéØ EXERCICE 1 : CALCULATRICE ROBUSTE")
    print("-" * 35)

    class Calculatrice:
        """Calculatrice avec gestion compl√®te des erreurs"""

        def __init__(self):
            self.historique = []

        def calculer(self, operation, a, b):
            try:
                if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
                    raise TypeError("Les op√©randes doivent √™tre des nombres")

                if operation == "+":
                    resultat = a + b
                elif operation == "-":
                    resultat = a - b
                elif operation == "*":
                    resultat = a * b
                elif operation == "/":
                    if b == 0:
                        raise ZeroDivisionError("Division par z√©ro")
                    resultat = a / b
                elif operation == "**":
                    resultat = a**b
                else:
                    raise ValueError(f"Op√©ration non support√©e: {operation}")

                self.historique.append(f"{a} {operation} {b} = {resultat}")
                return resultat

            except (TypeError, ValueError, ZeroDivisionError) as e:
                self.historique.append(f"ERREUR: {a} {operation} {b} ‚Üí {e}")
                raise
            except Exception as e:
                self.historique.append(f"ERREUR INATTENDUE: {e}")
                raise

        def afficher_historique(self):
            print("üìã Historique des calculs:")
            for calcul in self.historique[-5:]:
                print(f"  {calcul}")

    # Test de la calculatrice
    calc = Calculatrice()

    tests = [
        ("+", 10, 5),
        ("-", 10, 5),
        ("*", 10, 5),
        ("/", 10, 0),  # ‚ùå Division par z√©ro
        ("/", 10, 2),
        ("^", 10, 2),  # ‚ùå Op√©ration invalide
        ("+", "10", 5),  # ‚ùå Type invalide
    ]

    for op, a, b in tests:
        try:
            resultat = calc.calculer(op, a, b)
            print(f"‚úÖ {a} {op} {b} = {resultat}")
        except Exception as e:
            print(f"‚ùå {a} {op} {b} ‚Üí {e}")

    calc.afficher_historique()

    print("\nüîß EXERCICE 2 : SYST√àME DE R√âSERVATION")
    print("-" * 35)

    class ErreurReservation(Exception):
        pass

    class DateInvalideError(ErreurReservation):
        pass

    class CapaciteDepasseeError(ErreurReservation):
        pass

    class SystemeReservation:
        def __init__(self, capacite_max=100):
            self.capacite_max = capacite_max
            self.reservations = []

        def reserver(self, nom, date, nombre_personnes):
            try:
                # Validation de la date
                if not self._date_valide(date):
                    raise DateInvalideError(f"Date invalide: {date}")

                # Validation du nombre de personnes
                if not isinstance(nombre_personnes, int) or nombre_personnes <= 0:
                    raise ValueError(
                        "Le nombre de personnes doit √™tre un entier positif"
                    )

                # V√©rification de la capacit√©
                total_reservations = sum(
                    r["nombre_personnes"] for r in self.reservations
                )
                if total_reservations + nombre_personnes > self.capacite_max:
                    raise CapaciteDepasseeError(
                        f"Capacit√© d√©pass√©e: {total_reservations + nombre_personnes}/{self.capacite_max}"
                    )

                # Cr√©ation de la r√©servation
                reservation = {
                    "nom": nom,
                    "date": date,
                    "nombre_personnes": nombre_personnes,
                }
                self.reservations.append(reservation)

                return f"‚úÖ R√©servation confirm√©e pour {nom} le {date}"

            except (DateInvalideError, CapaciteDepasseeError, ValueError) as e:
                raise ErreurReservation(f"√âchec de la r√©servation: {e}")

        def _date_valide(self, date):
            # Simulation simple de validation de date
            return isinstance(date, str) and len(date) == 10

    # Test du syst√®me de r√©servation
    reservation_system = SystemeReservation(capacite_max=50)

    scenarios_reservation = [
        ("Alice", "2024-01-15", 4),
        ("Bob", "2024-01-15", 45),  # ‚ùå Capacit√© d√©pass√©e
        ("Charlie", "date_invalide", 2),  # ‚ùå Date invalide
        ("David", "2024-01-16", -2),  # ‚ùå Nombre invalide
        ("Eve", "2024-01-15", 10),
    ]

    for nom, date, personnes in scenarios_reservation:
        try:
            resultat = reservation_system.reserver(nom, date, personnes)
            print(resultat)
        except ErreurReservation as e:
            print(f"‚ùå {e}")


# exemples_pratiques()

# =============================================================================
# SECTION 9 : OUTILS ET TECHNIQUES AVANC√âES
# =============================================================================

print("\n" + "=" * 70)
print("SECTION 9 : TECHNIQUES AVANC√âES")
print("=" * 70)


def techniques_avancees():
    """
    Techniques avanc√©es de gestion d'erreurs
    """
    print(
        """
üöÄ TECHNIQUES AVANC√âES :

1. üîß Context managers personnalis√©s
2. üé≠ D√©corateurs de gestion d'erreurs
3. üìä Logging structur√©
4. üîÑ Retry automatique
    """
    )

    print("\nüîß CONTEXT MANAGERS PERSONNALIS√âS")
    print("-" * 35)

    class GestionnaireTransaction:
        """Context manager pour g√©rer les transactions avec rollback"""

        def __enter__(self):
            print("üöÄ D√©but de la transaction")
            self.etat_initial = "sauvegard√©"
            return self

        def __exit__(self, exc_type, exc_val, exc_tb):
            if exc_type is not None:
                # Une exception s'est produite ‚Üí rollback
                print(f"üîô Rollback √† cause de: {exc_type.__name__}: {exc_val}")
                self.rollback()
            else:
                # Tout s'est bien pass√© ‚Üí commit
                print("‚úÖ Commit de la transaction")

            print("üîß Fin de la transaction")
            return True  # Emp√™che la propagation de l'exception

        def rollback(self):
            print("‚Ü©Ô∏è  Restauration de l'√©tat initial")

    # Utilisation du context manager
    print("Sc√©nario sans erreur:")
    with GestionnaireTransaction():
        print("   Ex√©cution d'op√©rations...")
        resultat = 10 + 5
        print(f"   R√©sultat: {resultat}")

    print("\nSc√©nario avec erreur:")
    with GestionnaireTransaction():
        print("   Ex√©cution d'op√©rations...")
        resultat = 10 / 0  # ‚ùå Division par z√©ro
        print(f"   R√©sultat: {resultat}")  # Cette ligne ne sera pas ex√©cut√©e

    print("\nüîÑ D√âCORATEUR DE RETRY AUTOMATIQUE")
    print("-" * 35)

    def retry(max_tentatives=3, delai=1):
        """D√©corateur pour r√©essayer automatiquement en cas d'√©chec"""
        import time

        def decorateur(fonction):
            def wrapper(*args, **kwargs):
                tentatives = 0
                while tentatives < max_tentatives:
                    try:
                        return fonction(*args, **kwargs)
                    except Exception as e:
                        tentatives += 1
                        if tentatives == max_tentatives:
                            print(f"‚ùå √âchec apr√®s {max_tentatives} tentatives: {e}")
                            raise
                        else:
                            print(
                                f"üîÑ Tentative {tentatives}/{max_tentatives} √©chou√©e: {e}"
                            )
                            time.sleep(delai)

            return wrapper

        return decorateur

    @retry(max_tentatives=3, delai=0.5)
    def appel_api_simule():
        """Simule un appel API qui peut √©chouer al√©atoirement"""
        import random

        if random.random() < 0.7:  # 70% de chance d'√©chec
            raise ConnectionError("√âchec de connexion √† l'API")
        return "‚úÖ Donn√©es re√ßues de l'API"

    # Test du d√©corateur de retry
    print("Test d'appel API avec retry automatique:")
    try:
        resultat = appel_api_simule()
        print(resultat)
    except Exception as e:
        print(f"√âchec d√©finitif: {e}")

    print("\nüìä LOGGING STRUCTUR√â")
    print("-" * 25)

    def setup_logging():
        """Configuration du logging structur√©"""
        import logging
        import json

        class JSONFormatter(logging.Formatter):
            def format(self, record):
                log_entry = {
                    "timestamp": self.formatTime(record),
                    "level": record.levelname,
                    "message": record.getMessage(),
                    "module": record.module,
                    "function": record.funcName,
                }
                return json.dumps(log_entry)

        logger = logging.getLogger()
        handler = logging.StreamHandler()
        handler.setFormatter(JSONFormatter())
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)

        return logger

    # Exemple de logging structur√©
    logger = setup_logging()

    def operation_risquee():
        try:
            # Simulation d'op√©ration
            resultat = 10 / 2
            logger.info("Op√©ration r√©ussie", extra={"resultat": resultat})
            return resultat
        except Exception as e:
            logger.error("√âchec de l'op√©ration", extra={"erreur": str(e)})
            raise

    print("Logging structur√© (format JSON):")
    operation_risquee()


# techniques_avancees()

# =============================================================================
# CONCLUSION
# =============================================================================

print("\n" + "=" * 70)
print("üéì CONCLUSION - R√âCAPITULATIF")
print("=" * 70)

print(
    """
‚úÖ CE QUE VOUS SAVEZ MAINTENANT :

1. üéØ Identifier les diff√©rents types d'erreurs
2. üõ°Ô∏è  Utiliser try/except/else/finally
3. üö® Lever des exceptions avec raise
4. üé® Cr√©er des exceptions personnalis√©es
5. üìù Appliquer les bonnes pratiques
6. üîß Utiliser des techniques avanc√©es

üîÆ PROCHAINES √âTAPES :

1. üß™ Pratiquer avec vos propres projets
2. üìö Explorer la documentation officielle
3. üîß √âtudier les gestionnaires de contexte
4. üèóÔ∏è  Implementer la gestion d'erreurs dans des applications r√©elles

üìö RESSOURCES UTILES :
‚Ä¢ Documentation Python: https://docs.python.org/3/tutorial/errors.html
‚Ä¢ Real Python: Gestion d'erreurs avanc√©e
‚Ä¢ PEP 8: Style guide pour Python

üéØ SOUVENez-VOUS :
¬´ Une bonne gestion d'erreurs ne consiste pas √† √©viter les erreurs,
mais √† les g√©rer avec √©l√©gance et √† fournir une exp√©rience utilisateur fluide. ¬ª
"""
)

# =============================================================================
# MENU PRINCIPAL
# =============================================================================


def afficher_menu():
    """Affiche le menu principal de la pr√©sentation"""
    print("\n" + "=" * 70)
    print("üìö MENU PRINCIPAL - GESTION D'ERREURS")
    print("=" * 70)
    print("1. üéØ Introduction - Pourquoi g√©rer les erreurs ?")
    print("2. üîç Section 1 - Types d'erreurs")
    print("3. üß± Section 2 - Structure try/except")
    print("4. üéØ Section 3 - Gestion multiple")
    print("5. üîÑ Section 4 - Else et Finally")
    print("6. üö® Section 5 - Lever des exceptions")
    print("7. üé® Section 6 - Exceptions personnalis√©es")
    print("8. üìö Section 7 - Bonnes pratiques")
    print("9. üí™ Section 8 - exemples pratiques")
    print("10. üöÄ Section 9 - Techniques avanc√©es")
    print("11. üéì Conclusion")
    print("12. üß™ Tout ex√©cuter")
    print("0. üö™ Quitter")
    print("=" * 70)


def main():
    """Fonction principale avec menu interactif"""
    while True:
        afficher_menu()
        choix = input("\nChoisissez une section (0-12): ").strip()

        if choix == "0":
            print("üëã Au revoir ! Bonne continuation avec Python !")
            break
        elif choix == "1":
            print("\n" + "=" * 70)
            print("üéØ INTRODUCTION")
            print("=" * 70)
            # L'introduction est d√©j√† affich√©e au d√©but
        elif choix == "2":
            demonstration_erreurs()
        elif choix == "3":
            structure_de_base()
        elif choix == "4":
            gestion_multiple()
        elif choix == "5":
            else_et_finally()
        elif choix == "6":
            lever_exceptions()
        elif choix == "7":
            exceptions_personnalisees()
        elif choix == "8":
            bonnes_pratiques()
        elif choix == "9":
            exemples_pratiques()
        elif choix == "10":
            techniques_avancees()
        elif choix == "11":
            # Conclusion d√©j√† affich√©e
            print("‚úÖ Pr√©sentation termin√©e !")
        elif choix == "12":
            print("üß™ Ex√©cution de toute la pr√©sentation...")
            demonstration_erreurs()
            structure_de_base()
            gestion_multiple()
            else_et_finally()
            lever_exceptions()
            exceptions_personnalisees()
            bonnes_pratiques()
            exemples_pratiques()
            techniques_avancees()
            print("‚úÖ Toutes les sections ont √©t√© ex√©cut√©es !")
        else:
            print("‚ùå Choix invalide ! Veuillez choisir entre 0 et 12.")

        if choix != "0":
            input("\nAppuyez sur Entr√©e pour continuer...")


# =============================================================================
# LANCEMENT
# =============================================================================

if __name__ == "__main__":
    print("üöÄ PR√âSENTATION SUR LA GESTION D'ERREURS EN PYTHON")
    print("D√©commentez main() pour le menu interactif ou les fonctions individuelles")

    # D√©commentez la ligne suivante pour le menu interactif
    # main()

    print("\nüí° CONSEILS D'UTILISATION :")
    print("‚Ä¢ D√©commentez les fonctions une par une pour √©tudier")
    print("‚Ä¢ Exp√©rimentez avec le code")
    print("‚Ä¢ Cr√©ez vos propres exemples")
    print("‚Ä¢ Pratiquez avec vos projets personnels")
